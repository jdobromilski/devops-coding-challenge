AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service into an ECS cluster behind a public load balancer.
Parameters:
  EnvironmentName:
    Type: String
    Default: jarek-myapp
    Description: Environment name
  NetworkingStackName:
    Type: String
    Default: jarek-myapp-networking
    Description: Networking Stack Name for import function
  DockerImageUrlnginx:
    Type: String
    Default: 792526823392.dkr.ecr.eu-west-1.amazonaws.com/myapp_nginx
    Description: The url of a docker image that contains the reverse proxy
  DockerImageUrlwsgi:
    Type: String
    Default: 792526823392.dkr.ecr.eu-west-1.amazonaws.com/myapp_wsgi
    Description: The url of a docker image that contains backend application

Resources:
  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition1:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${EnvironmentName}-myapp-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 512
      Memory: 1024
      ExecutionRoleArn: {'Fn::ImportValue': !Sub '${NetworkingStackName}-ExecutionRoleArn'}
      TaskRoleArn: {'Fn::ImportValue': !Sub '${NetworkingStackName}-TaskRoleArn'}
      ContainerDefinitions:
        - Name: myapp_nginx
          Cpu: 256
          Memory: 512
          Environment:
            - Name: AWS_REGION
              Value: eu-west-1
          Image: !Ref DockerImageUrlnginx
          PortMappings:
            - ContainerPort: 80
          Command: ["nginx", "-g", "daemon off;"]
          WorkingDirectory: "/"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${EnvironmentName}-myapp_nginx
        - Name: myapp_wsgi
          Cpu: 256
          Memory: 512
          Environment:
            - Name: AWS_REGION
              Value: eu-west-1
          Image: !Ref DockerImageUrlwsgi
          PortMappings:
            - ContainerPort: 3031
          Command: [ "uwsgi", "--socket", "0.0.0.0:3031", "--protocol", "http", "--uid","uwsgi", "--wsgi", "myapp" ]
          WorkingDirectory: "/app"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref 'CloudWatchLogsGroup'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Sub ${EnvironmentName}-myapp_wsgi

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${EnvironmentName}-myapp
      Cluster: {'Fn::ImportValue': !Sub '${NetworkingStackName}-ClusterName'}
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: 2
      TaskDefinition: !Ref 'TaskDefinition1'
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: myapp_nginx
          ContainerPort: 80
          TargetGroupArn: {'Fn::ImportValue': !Sub '${NetworkingStackName}-LoadBalancerTargetGroup'}
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - {'Fn::ImportValue': !Sub '${NetworkingStackName}-PrivateSubnet1'}
            - {'Fn::ImportValue': !Sub '${NetworkingStackName}-PrivateSubnet2'}
          SecurityGroups:
            - {'Fn::ImportValue': !Sub '${NetworkingStackName}-ContainerSecurityGroup'}

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 2
      MaxCapacity: 6
      ResourceId: !Join ['/', [service, {'Fn::ImportValue': !Sub '${NetworkingStackName}-ClusterName'}, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
      RoleARN: !GetAtt AutoScalingRole.Arn
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        # Keep things at or lower than 50% CPU utilization, for example
        TargetValue: !Ref AutoScalingTargetValue
